package com.hhu.mlthfs.controller.forecast;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.hhu.mlthfs.base.BaseController;
import com.hhu.mlthfs.model.ForecastResult;
import com.hhu.mlthfs.utils.LayerData;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.WebUtils;

import javax.servlet.ServletRequest;
import java.util.Map;

/**
 * 预报结果详情 控制层
 *
 */
@RestController
@RequestMapping("/forecast")
public class ForecastInfoController extends BaseController {
    public static final Logger logger= LoggerFactory.getLogger(ForecastInfoController.class);


    /**
     * 进入系统方案详情界面
     * @return
     */
    @GetMapping("/forecastinfoPage")
    public ModelAndView forecastInfoIndex(){
        ModelAndView mav=new ModelAndView("page/forecast/forecastinfo/forecastinfoPage");
        return mav;
    }

    /**
     * 预报结果信息列表
     * @param page
     * @param limit
     * @param request
     * @return
     */

    @GetMapping("/forecastInfo")
    public LayerData<ForecastResult> list(@RequestParam(value = "page",defaultValue = "1") Integer page,
                                          @RequestParam(value = "limit",defaultValue = "10") Integer limit,
                                          ServletRequest request){
        Map map= WebUtils.getParametersStartingWith(request,"s_");
        LayerData<ForecastResult> forecastResultLayerData=new LayerData<>();
        EntityWrapper<ForecastResult> forecastResultEntityWrapper=new EntityWrapper<>();
        forecastResultEntityWrapper.eq("del_flag",false);
        forecastResultEntityWrapper.like("plan_type","0");
        if(!map.isEmpty()){
            String keys= (String) map.get("key");
            if(StringUtils.isNotBlank(keys)){
                forecastResultEntityWrapper.like("forecast_section",keys);

            }else {
                map.remove("key");
            }

            String forecastTime=(String)map.get("forecastTime");
            if(StringUtils.isNotBlank(forecastTime)){
                forecastResultEntityWrapper.like("forecast_time",forecastTime);
            }else{
                map.remove("forecastTime");
            }
            String forecastTimeStart = (String) map.get("forecastTimeStart");
            if (StringUtils.isNotBlank(forecastTimeStart)) {
                forecastResultEntityWrapper.like("forecast_time_start", forecastTimeStart);
            } else {
                map.remove("forecastTimeStart");
            }
        }
        Page<ForecastResult> forecastResultPage=forecastResultService.selectPage(new Page<>(page,limit),forecastResultEntityWrapper);
        forecastResultLayerData.setCount(forecastResultPage.getTotal());
        forecastResultLayerData.setData(forecastResultPage.getRecords());
        logger.info(forecastResultLayerData.toString());
        return forecastResultLayerData;
    }
}
