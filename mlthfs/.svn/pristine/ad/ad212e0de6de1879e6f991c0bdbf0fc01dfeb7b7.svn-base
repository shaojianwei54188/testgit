package com.hhu.mlthfs.controller.adjust;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.hhu.mlthfs.base.BaseController;
import com.hhu.mlthfs.controller.forecast.ForecastInfoController;
import com.hhu.mlthfs.model.ForecastResult;
import com.hhu.mlthfs.utils.LayerData;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.WebUtils;

import javax.servlet.ServletRequest;
import java.util.Map;

/**
 * 单模型校正 控制层
 *
 */
@RestController
@RequestMapping("/adjust")
public class AdjustController extends BaseController {
    public static final Logger logger= LoggerFactory.getLogger(ForecastInfoController.class);

    /**
     * 进入系统 执行校正界面
     * @return
     */
    @GetMapping("/doAdjustPage")
    public ModelAndView doForecastPageIndex(){
        ModelAndView mav=new ModelAndView("page/adjust/doAdjustPage");
        return mav;
    }

    /**
     * 进入 校正结果界面
     */
    @GetMapping("/adjustResultPage")
    public ModelAndView adjustResultPage(){
        ModelAndView mav=new ModelAndView("page/adjust/adjustinfo/adjustinfo");
        return mav;

    }
    /**
     * 校正结果信息列表
     *
     *
     */
    @GetMapping("/adjustInfo")
    public LayerData<ForecastResult> list(@RequestParam(value = "page",defaultValue = "1") Integer page,
                                          @RequestParam(value = "limit",defaultValue = "10") Integer limit,
                                          ServletRequest request){
        Map map= WebUtils.getParametersStartingWith(request,"s_");
        //返回校正结果
        LayerData<ForecastResult> adjustResultLayerData=new LayerData<>();
        EntityWrapper<ForecastResult> adjustResultEntityWrapper=new EntityWrapper<>();
        adjustResultEntityWrapper.eq("del_flag",false);
        adjustResultEntityWrapper.like("plan_type","0");
        if(!map.isEmpty()){
            String keys= (String) map.get("key");
            if(StringUtils.isNotBlank(keys)){
                adjustResultEntityWrapper.like("forecast_section",keys);

            }else {
                map.remove("key");
            }

            String forecastTime=(String)map.get("forecastTime");
            if(StringUtils.isNotBlank(forecastTime)){
                adjustResultEntityWrapper.like("forecast_time",forecastTime);
            }else{
                map.remove("forecastTime");
            }
            String forecastTimeStart = (String) map.get("forecastTimeStart");
            if (StringUtils.isNotBlank(forecastTimeStart)) {
                adjustResultEntityWrapper.like("forecast_time_start", forecastTimeStart);
            } else {
                map.remove("forecastTimeStart");
            }
        }
        Page<ForecastResult> adjustResultPage=forecastResultService.selectPage(new Page<>(page,limit),adjustResultEntityWrapper);
        adjustResultLayerData.setCount(adjustResultPage.getTotal());
        adjustResultLayerData.setData(adjustResultPage.getRecords());
        logger.info(adjustResultLayerData.toString());
        return adjustResultLayerData;
    }
}
